[{"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\index.js":"1","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\Directory.js":"2","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\OrderForm.js":"3","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\productlisting\\ProductListing.js":"4","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\inventorymodals\\index.js":"5","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\AccountsRec.js":"6","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\AdminTools.js":"7","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\InventoryContext.js":"8","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\OrderContext.js":"9","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\AccountsPay.js":"10","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\utils\\Api.js":"11","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchinventory\\SubComponent\\InventoryList.js":"12","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\categoryselection\\CategorySelection.js":"13","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchproduct\\SearchProduct.js":"14","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\customerdisplay\\CustomerDisplay.js":"15","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\containers\\App.js":"16","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\Customers.js":"17","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchinventory\\subcomponent\\InventoryList.js":"18","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\Inventory.js":"19","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\LoginContext.js":"20","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\Login.js":"21","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\editproductsupplier\\EditProductSupplier.js":"22","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\editproductdetail\\EditProductDetail.js":"23","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\viewtransactions\\ViewTransactions.js":"24","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\productinventory\\ProductInventory.js":"25","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\ordercart\\OrderCart.js":"26","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\findrestaurantresults\\FindRestaurantResults.js":"27","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\supplierlist\\SupplierList.js":"28","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchinventory\\SearchInventoryMain.js":"29","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\inventorySearch\\InventorySearch.js":"30","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\addProductToCart\\AddProductToCart.js":"31","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\DirectoryContext.js":"32","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\addInventoryInvoice\\AddInventoryInvoice.js":"33","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\addInventoryItem\\AddInventoryItem.js":"34","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\serviceWorker.js":"35"},{"size":691,"mtime":1607262477908,"results":"36","hashOfConfig":"37"},{"size":12521,"mtime":1608295114198,"results":"38","hashOfConfig":"37"},{"size":21619,"mtime":1608177069510,"results":"39","hashOfConfig":"37"},{"size":6991,"mtime":1607263478447,"results":"40","hashOfConfig":"37"},{"size":18375,"mtime":1607227434891,"results":"41","hashOfConfig":"37"},{"size":1189,"mtime":1606149579128,"results":"42","hashOfConfig":"37"},{"size":1179,"mtime":1606149565348,"results":"43","hashOfConfig":"37"},{"size":1812,"mtime":1608295115415,"results":"44","hashOfConfig":"37"},{"size":655,"mtime":1603955563609,"results":"45","hashOfConfig":"37"},{"size":1186,"mtime":1606149590655,"results":"46","hashOfConfig":"37"},{"size":3682,"mtime":1606711003901,"results":"47","hashOfConfig":"37"},{"size":8390,"mtime":1606133523752,"results":"48","hashOfConfig":"37"},{"size":1195,"mtime":1607263373638,"results":"49","hashOfConfig":"37"},{"size":3283,"mtime":1607263435826,"results":"50","hashOfConfig":"37"},{"size":1677,"mtime":1606149728039,"results":"51","hashOfConfig":"37"},{"size":2207,"mtime":1607285914696,"results":"52","hashOfConfig":"37"},{"size":8279,"mtime":1607263694253,"results":"53","hashOfConfig":"37"},{"size":8836,"mtime":1608544475759,"results":"54","hashOfConfig":"37"},{"size":1842,"mtime":1608274434304,"results":"55","hashOfConfig":"37"},{"size":177,"mtime":1606150300854,"results":"56","hashOfConfig":"37"},{"size":8725,"mtime":1608277260851,"results":"57","hashOfConfig":"37"},{"size":9127,"mtime":1608091730891,"results":"58","hashOfConfig":"37"},{"size":5476,"mtime":1607263580526,"results":"59","hashOfConfig":"37"},{"size":5070,"mtime":1606631406671,"results":"60","hashOfConfig":"37"},{"size":9918,"mtime":1608508369238,"results":"61","hashOfConfig":"37"},{"size":8674,"mtime":1608548689789,"results":"62","hashOfConfig":"37"},{"size":1933,"mtime":1606149693222,"results":"63","hashOfConfig":"37"},{"size":10489,"mtime":1608093137300,"results":"64","hashOfConfig":"37"},{"size":3891,"mtime":1607281446321,"results":"65","hashOfConfig":"37"},{"size":1472,"mtime":1607214145244,"results":"66","hashOfConfig":"37"},{"size":11428,"mtime":1607263611487,"results":"67","hashOfConfig":"37"},{"size":187,"mtime":1605751439289,"results":"68","hashOfConfig":"37"},{"size":21476,"mtime":1608336348340,"results":"69","hashOfConfig":"37"},{"size":18177,"mtime":1608295116809,"results":"70","hashOfConfig":"37"},{"size":5227,"mtime":1597461134424,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1fl9zil",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\index.js",[],["160","161"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\Directory.js",[],["162","163"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\OrderForm.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\productlisting\\ProductListing.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\inventorymodals\\index.js",[],["164","165"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\AccountsRec.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\AdminTools.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\InventoryContext.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\OrderContext.js",[],["166","167"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\AccountsPay.js",[],["168","169"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\utils\\Api.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchinventory\\SubComponent\\InventoryList.js",[],["170","171"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\categoryselection\\CategorySelection.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchproduct\\SearchProduct.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\customerdisplay\\CustomerDisplay.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\containers\\App.js",[],["172","173"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\Customers.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchinventory\\subcomponent\\InventoryList.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\DirectoryPages\\Inventory.js",["174","175","176"],"import React, {useState, useContext} from \"react\";\r\nimport {Button, Container, Row, Col} from \"react-bootstrap\";\r\nimport SearchInventory from '../../components/searchinventory/SearchInventoryMain';\r\nimport AddInventoryInvoice from '../../components/addInventoryInvoice/AddInventoryInvoice';\r\nimport InventoryContext from '../../context/InventoryContext'\r\n\r\nconst Inventory = () =>{\r\n    const inventoryContext = useContext(InventoryContext)\r\n    // const [displayType, setDisplayType] = useState(null)\r\n\r\n    // const selectInventoryFunc = (func) => {\r\n    //     setDisplayType(func)\r\n    // }\r\n\r\n    const switchDisplay = () => {\r\n        switch(inventoryContext.subdirectory){\r\n            case 'Search-Inventory':\r\n                return(\r\n                    <SearchInventory />\r\n                )\r\n            case 'Add-Inventory':\r\n                return(\r\n                    <AddInventoryInvoice />\r\n                )\r\n            default:\r\n                return(\r\n                    <></>\r\n                )\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Container fluid>\r\n            {/* <Row>\r\n                <Col>\r\n                    <Button variant={displayType === 'Search-Inventory'?'warning':'info'} onClick={()=> selectInventoryFunc('Search-Inventory')}>Search Inventory</Button>&nbsp;\r\n                    <Button variant={displayType === 'Add-Inventory'?'warning':'info'} onClick={()=> selectInventoryFunc('Add-Inventory')}>Add Inventory</Button>&nbsp;\r\n                    <Button variant={displayType === 'Add-Product'?'warning':'info'} onClick={()=> selectInventoryFunc('Add-Product')}>Add New Product</Button>&nbsp;\r\n                </Col>\r\n            </Row>\r\n            <br /> */}\r\n            <Row>\r\n                {switchDisplay()}\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Inventory;","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\LoginContext.js",[],["177","178"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\pages\\Login.js",[],["179","180"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\editproductsupplier\\EditProductSupplier.js",["181","182"],"import React, {useState, useContext} from 'react';\r\nimport {Row, Col, Modal, Button, Container, Spinner, Badge} from 'react-bootstrap';\r\nimport API from '../../utils/Api'\r\nimport SupplierList from '../../components/supplierlist/SupplierList'\r\nimport InventoryContext from '../../context/InventoryContext'\r\n\r\nconst EditProductSupplier = (props) =>{\r\n    const colStyle = {\r\n        backgroundColor: '#404040',\r\n        borderStyle: 'solid',\r\n        borderWidth: '1px'\r\n    }\r\n\r\n    const rowStyle = {\r\n        marginBottom: '2px'\r\n    }\r\n\r\n    const supplierTier = ['Primary Supplier','Secondary Supplier','Tertiary Supplier']\r\n    const supplierFieldName = ['supplier_primary_id','supplier_secondary_id','supplier_tertiary_id']\r\n\r\n    const modalStyle = {backgroundColor: '#595959'}\r\n\r\n    const inventoryContext = useContext(InventoryContext)\r\n    // const searchInputRef = useRef(null)\r\n    const [contentData, setContentData] = useState(null)\r\n    const [contentType, setContentType] = useState('supplier-display')\r\n    //const [supplierLoading, setSupplierLoading] = useState(false)\r\n    const [updating, setUpdating] = useState(false)\r\n    let supplier = inventoryContext.productSuppliers[props.supplierIndex]\r\n\r\n    // const searchSupplierByInput = () => {\r\n    //     setSupplierLoading(true)\r\n    //     API.getSuppliersByInput({\r\n    //         searchString: searchInputRef.current.value.trim()\r\n    //     }).then( result => {\r\n    //         setContentData(result.data)\r\n    //         setSupplierLoading(false)\r\n    //     }).catch(err => {\r\n    //         console.log(err)\r\n    //     })\r\n    // }\r\n\r\n    // const searchAllSuppliers = () => {\r\n    //     setSupplierLoading(true)\r\n    //     API.getAllSuppliers().then( result => {\r\n    //         setContentData(result.data)\r\n    //         setSupplierLoading(false)\r\n    //     }).catch(err => {\r\n    //         console.log(err)\r\n    //     })\r\n    // }\r\n\r\n    const updateProductField = (supplier) => {\r\n        setUpdating(true)\r\n        setContentType('updating-supplier')\r\n        API.updateProduct({\r\n            id: props.product.id,\r\n            update: {[supplierFieldName[props.supplierIndex]]: supplier.id}\r\n        }).then(result => {\r\n            let updatedProduct = result.data[0]\r\n            let updatedProducts = [...inventoryContext.products]\r\n            updatedProducts.splice(props.productIndex,1,updatedProduct)\r\n            inventoryContext.storeProducts(updatedProducts)\r\n            API.getProductSuppliers({\r\n                supplier_ids: [updatedProduct.supplier_primary_id,updatedProduct.supplier_secondary_id,updatedProduct.supplier_tertiary_id]\r\n            }).then( result => {\r\n                inventoryContext.storeSelectedProduct(updatedProduct)\r\n                inventoryContext.storeProductSuppliers(result.data)\r\n            }).catch( err => {\r\n                console.log(err)\r\n            })\r\n            setContentType('supplier-display')\r\n            setUpdating(false)\r\n        }).catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const formatPhoneNumber = (phoneNumberString) => {\r\n        var cleaned = ('' + phoneNumberString).replace(/\\D/g, '')\r\n        var match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\r\n        if (match) {\r\n          return '(' + match[1] + ') ' + match[2] + '-' + match[3]\r\n        }\r\n        return null\r\n      }\r\n\r\n    const contentSwitchHandler = (contentType, data) => {\r\n        switch (contentType){\r\n            case 'updating-supplier':\r\n                return(\r\n                    <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <Spinner animation=\"border\" role=\"status\" size='lg'>\r\n                                    <span className=\"sr-only\">Loading...</span>\r\n                                </Spinner><span>Updating Supplier...</span>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                )\r\n            case 'supplier-display':\r\n                return(\r\n                    <>\r\n                    {data?\r\n                        <>\r\n                        <Row className='md-1' style={rowStyle}>\r\n                            <Col>Supplier ID</Col>\r\n                            <Col style={colStyle}>{data.id}</Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Name</Col>\r\n                            <Col style={colStyle}>{data.name_english} ({data.name_chinese})</Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Address</Col>\r\n                            <Col style={colStyle}>\r\n                                <p style={{margin: 0}}>{data.billing_street}</p>\r\n                                <p style={{margin: 0}}>{data.billing_city}, {data.billing_state} {data.billing_zipcode}</p>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Busness Phone</Col>\r\n                            <Col style={colStyle}><p style={{margin: 0}}>{formatPhoneNumber(data.business_phone_number)}</p></Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Busness Fax</Col>\r\n                            <Col style={colStyle}><p style={{margin: 0}}>{formatPhoneNumber(data.fax_number)}</p></Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Busness Email</Col>\r\n                            <Col style={colStyle}><p style={{margin: 0}}>{data.email? data.email: 'None'}</p></Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Contact</Col>\r\n                            <Col style={colStyle}>\r\n                                <p style={{margin: 0}}>{data.contact_first_name} {data.contact_last_name}</p>\r\n                                <p style={{margin: 0}}>Phone: {formatPhoneNumber(data.contact_phone_number)}</p>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Account Number</Col>\r\n                            <Col style={colStyle}><p>{data.account_number}</p></Col>\r\n                        </Row>\r\n                        <Row style={rowStyle}>\r\n                            <Col>Products</Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col style={colStyle}>\r\n                            {data.products.toUpperCase()}\r\n                            </Col>\r\n                        </Row>\r\n                        </>\r\n                            :\r\n                            'No Supplier'\r\n                        }\r\n                    </>\r\n                )\r\n            case 'search-suppliers':\r\n                return(\r\n                    <SupplierList \r\n                        updateSupplier = {updateProductField}\r\n                    />\r\n                )\r\n            default:\r\n                return(\r\n                    null\r\n                )\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Modal.Header closeButton style={modalStyle}>\r\n        <Modal.Title>Edit {supplierTier[props.supplierIndex]}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body style={modalStyle}>\r\n            <Container fluid>\r\n                <Row>\r\n                    <Col lg={4} md={4}>\r\n                        <Row>\r\n                            <Col>\r\n                                <h6 style={{display: 'inline-block', margin: 'auto'}}><b>Current Supplier:</b></h6>\r\n                                <span style={{display: 'inline-block', float: 'right'}}>\r\n                                    <Badge variant='warning' size='sm' as='button' onClick={() => updateProductField(null)}>\r\n                                        Remove\r\n                                    </Badge>\r\n                                </span>\r\n                            </Col>\r\n                        </Row>\r\n                        <br />\r\n                        <Row>\r\n                            <Col>\r\n                                {contentSwitchHandler(contentType, supplier)}\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col lg={8} md={8}>\r\n                        <Row className='mb-1'>\r\n                            <Col>\r\n                                <b>Search Suppliers:</b>\r\n                            </Col>\r\n                        </Row>\r\n                        {contentSwitchHandler('search-suppliers', contentData)}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Modal.Body>\r\n        <Modal.Footer style={modalStyle}>\r\n            <Button variant=\"secondary\" onClick={props.closeModal}>\r\n                Close\r\n            </Button>\r\n        </Modal.Footer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditProductSupplier","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\editproductdetail\\EditProductDetail.js",[],["183","184"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\viewtransactions\\ViewTransactions.js",[],["185","186"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\productinventory\\ProductInventory.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\ordercart\\OrderCart.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\findrestaurantresults\\FindRestaurantResults.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\supplierlist\\SupplierList.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\searchinventory\\SearchInventoryMain.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\inventorySearch\\InventorySearch.js",["187"],"import React, {useContext, useRef, useEffect, useState} from 'react';\r\nimport Api from '../../utils/Api';\r\nimport {InputGroup, Button, FormControl} from 'react-bootstrap';\r\nimport InventoryContext from '../../context/InventoryContext';\r\n\r\nconst InventorySearch = (props) => {\r\n    const inventoryContext = useContext(InventoryContext)\r\n    const searchInputRef = useRef(null)\r\n    const [searchTimeout, setSearchTimeout] = useState(false) \r\n\r\n    const searchProductByInput = () => {\r\n        setSearchTimeout(true)\r\n        props.toggleLoading()\r\n        if(props.returnInput){\r\n            props.returnInput(searchInputRef.current.value.trim())\r\n        }\r\n        //This API should be changed to searchProductByInput\r\n        Api.searchInventoryByInput({\r\n            searchInput: searchInputRef.current.value.trim()\r\n        }).then(products => {\r\n            inventoryContext.storeProducts(products.data)\r\n            props.toggleLoaded()\r\n            setSearchTimeout(false)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n                <Button disabled={searchTimeout?true:false} variant={searchTimeout?'secondary':'warning'} onClick={searchProductByInput}>Search</Button>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n                placeholder=\"Product Name or ID\"\r\n                ref={searchInputRef}\r\n            />\r\n        </InputGroup>\r\n    )\r\n}\r\nexport default InventorySearch;","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\addProductToCart\\AddProductToCart.js",[],["188","189"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\context\\DirectoryContext.js",[],["190","191"],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\addInventoryInvoice\\AddInventoryInvoice.js",["192","193","194"],"import React,{useState, useContext, Suspense, useEffect} from 'react';\r\nimport {Container, Row, Col, Button, Spinner, Modal, InputGroup, FormControl, Badge, Accordion, Card, Dropdown, SplitButton} from 'react-bootstrap';\r\nimport InventoryContext from '../../context/InventoryContext';\r\nimport API from '../../utils/Api'\r\nimport './addInventoryInvoice.css'\r\nconst AddInventoryItem = React.lazy(() => import('../addInventoryItem/AddInventoryItem'));\r\nconst SupplierList = React.lazy(() => import('../supplierlist/SupplierList'))\r\n\r\nconst AddInventoryInvoice = () => {\r\n    const inventoryContext = useContext(InventoryContext);\r\n    const [showModal, setShowModal] = useState(false)\r\n    const [modalData, setModalData] = useState(null)\r\n    const [addItemLoading, setAddItemLoading] = useState(false)\r\n    const [submittingInv, setSubmittingInv] = useState(false)\r\n\r\n    const modalSwitchFunction = () => {\r\n        switch (modalData.type){\r\n            case 'add-new-item':\r\n                return(\r\n                    <Suspense fallback={\r\n                        loadingSpinner\r\n                    }>\r\n                        <AddInventoryItem\r\n                            addInvoiceItem = {addInvoiceItem}\r\n                            closeModal = {() => setShowModal(false)}\r\n                        />\r\n                    </Suspense>\r\n                )\r\n            case 'search-supplier':\r\n                return(\r\n                    <>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Search Suppliers</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Container>\r\n                            <Suspense fallback={loadingSpinner}>\r\n                                <SupplierList \r\n                                    updateSupplier = {selectSupplier}\r\n                                />\r\n                            </Suspense>\r\n                        </Container>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                    </Modal.Footer>\r\n                    </>\r\n                )\r\n            default:\r\n                return(\r\n                    null\r\n                )\r\n        }\r\n    }\r\n\r\n    const addInvoiceItem = item => {\r\n        let newInvoiceItems = [...inventoryContext.newInvoiceItems]\r\n        newInvoiceItems.push(item)\r\n        inventoryContext.storeNewInvoiceItems(newInvoiceItems)\r\n    }\r\n\r\n    const selectSupplier = supplier => {\r\n        let newInvoiceDetails = {...inventoryContext.newInvoiceDetails}\r\n        newInvoiceDetails.supplier_id = supplier.id\r\n        newInvoiceDetails.supplier_name = supplier.name\r\n        inventoryContext.storeNewInvoiceDetails(newInvoiceDetails)\r\n        // document.getElementById('supplier-name').value = supplier.name\r\n        setShowModal(false)\r\n    }\r\n\r\n    const validateInvoiceDetails = () => {\r\n        let inputValues = [\"ap-invoice-number\",\"supplier-name\",\"receive-date\"]\r\n        let checkInputValues = [];\r\n        inputValues.forEach(inputValue => {\r\n            if(document.getElementById(inputValue).value === undefined\r\n            || document.getElementById(inputValue).value === null\r\n            || document.getElementById(inputValue).value === ''){\r\n                document.getElementById(inputValue).style.borderColor = 'red';\r\n                document.getElementById(inputValue).style.borderStyle = 'solid';\r\n                document.getElementById(inputValue).style.borderWidth = '2px';\r\n                checkInputValues.push(false)\r\n            }else{\r\n                document.getElementById(inputValue).style.removeProperty('border-color')\r\n                document.getElementById(inputValue).style.removeProperty('border-style')\r\n                document.getElementById(inputValue).style.removeProperty('border-width')\r\n            }\r\n        })\r\n        return (checkInputValues.every(value => {return value? true: false}))\r\n    }\r\n\r\n    const validateInvoiceItems = () => {\r\n        let validateFields =['ap_invoice_number','purchase_order_number','supplier_id','supplier_name','receive_date','due_date',]\r\n        let validatedItemsArray = inventoryContext.newInvoiceItems.map((item,index) => {\r\n            validateFields.forEach(field =>{\r\n                if(inventoryContext.newInvoiceDetails[field] !== undefined &&\r\n                    item[field] !== inventoryContext.newInvoiceDetails[field]){\r\n                    item[field] = inventoryContext.newInvoiceDetails[field]\r\n                }else if (item[field] === undefined || item[field] === \"\"){\r\n                    item[field] = null\r\n                }\r\n            })\r\n            return item\r\n        })\r\n        console.log(validatedItemsArray)\r\n        return validatedItemsArray\r\n    }\r\n\r\n    const checkInvDetails = () => {\r\n        setAddItemLoading(true)\r\n        if(validateInvoiceDetails()){\r\n            setAddItemLoading(false)\r\n            handleModelSwitch('add-new-item','xl')\r\n        }else{\r\n            setAddItemLoading(false)\r\n        }\r\n    }\r\n\r\n    const loadingSpinner = <Spinner animation=\"border\" role=\"status\" size='sm'>\r\n        <span className=\"sr-only\">Loading...</span>\r\n        </Spinner>\r\n\r\n    const handleModelSwitch = (type, size, data) => {\r\n        setModalData({\r\n            type:type,\r\n            size:size?size:'lg',\r\n            data: data?data:null\r\n        })\r\n        setShowModal(true)\r\n    }\r\n\r\n    const removeItem = (item, index) =>{\r\n        let newInvoiceItems = [...inventoryContext.newInvoiceItems]\r\n        newInvoiceItems.splice(index, 1)\r\n        inventoryContext.storeNewInvoiceItems(newInvoiceItems)\r\n    }\r\n\r\n    const handleInputchange = e => {\r\n        let newInvoiceDetails = {...inventoryContext.newInvoiceDetails}\r\n        let fieldName = e.target.id.replace(/-/g,'_')\r\n        newInvoiceDetails[fieldName] = e.target.value\r\n        inventoryContext.storeNewInvoiceDetails(newInvoiceDetails)\r\n    }\r\n\r\n    const updateInvoiceTotal = invoiceTotal => {\r\n        let newInvoiceDetails = {...inventoryContext.newInvoiceDetails, invoice_total: invoiceTotal}\r\n        inventoryContext.storeNewInvoiceDetails(newInvoiceDetails)\r\n    }\r\n\r\n    const submitInvoice = () => {\r\n        setSubmittingInv(true)\r\n        if(validateInvoiceDetails()){\r\n            validateInvoiceItems()\r\n            //setSubmittingInv(false)\r\n            console.log('success')\r\n        }\r\n    }\r\n    //Runs if there is a change in newInvoiceItems context\r\n    //--Will always run when switchig to different sub directories\r\n    useEffect(()=> {\r\n        //If newInvoiceItems array has items, calculates new invoice total using array.\r\n        if(Array.isArray(inventoryContext.newInvoiceItems) && \r\n            inventoryContext.newInvoiceItems.length > 0){\r\n            let invoiceTotal = inventoryContext.newInvoiceItems.reduce((accumulator, currentValue) => {\r\n                return accumulator+(+currentValue.cost*+currentValue.invoice_quantity)\r\n            }, 0)\r\n            updateInvoiceTotal(invoiceTotal)\r\n        }\r\n        //If newInvoiceItems is an array and has length of 0\r\n        if(Array.isArray(inventoryContext.newInvoiceItems) &&\r\n            inventoryContext.newInvoiceItems.length === 0){\r\n            let invoiceTotal = 0\r\n            updateInvoiceTotal(invoiceTotal)\r\n        }\r\n    }, [inventoryContext.newInvoiceItems])\r\n\r\n    return(\r\n        <>\r\n        <Container fluid>\r\n            <Row className='justify-content-md-center' sm={1} md={2} lg={2}>\r\n                <Col className='invoice-detail-column' md={6} lg={4}>\r\n                    <Row>  \r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Invoice Number</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            value={inventoryContext.newInvoiceDetails.ap_invoice_number}\r\n                            placeholder=\"Invoice Number\"\r\n                            aria-label=\"Invoice Number\"\r\n                            aria-describedby=\"ap-invoice-number\"\r\n                            id=\"ap-invoice-number\" \r\n                            onChange={(e) => handleInputchange(e)}\r\n                            />\r\n                        </InputGroup>     \r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>PO Number</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            value={inventoryContext.newInvoiceDetails.purchase_order_number}\r\n                            id=\"purchase-order-number\"\r\n                            placeholder=\"PO Number\"\r\n                            aria-label=\"PO Number\"\r\n                            aria-describedby=\"po-number\"\r\n                            onChange={(e) => handleInputchange(e)}\r\n                            />\r\n                        </InputGroup>   \r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Receive Date</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            id=\"receive-date\"\r\n                            value={inventoryContext.newInvoiceDetails.receive_date}\r\n                            placeholder=\"MM/DD/YYYY\"\r\n                            aria-label=\"Receive Date\"\r\n                            aria-describedby=\"receive-date\"\r\n                            type='date'\r\n                            onChange={(e) => handleInputchange(e)}\r\n                            />\r\n                        </InputGroup> \r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Due Date</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            id=\"due-date\"\r\n                            value={inventoryContext.newInvoiceDetails.due_date}\r\n                            placeholder=\"MM/DD/YYYY\"\r\n                            aria-label=\"Due Date\"\r\n                            aria-describedby=\"due-date\"\r\n                            type='date'\r\n                            onChange={(e) => handleInputchange(e)}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                </Col>\r\n                <Col className='invoice-detail-column' md={6} lg={4}>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <Button \r\n                                    variant='warning' \r\n                                    style={{width: '140px', fontWeight: 'bold', textAlign: 'left'}}\r\n                                    onClick={() => handleModelSwitch('search-supplier','xl')}\r\n                                    >Search</Button>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            disabled\r\n                            value={inventoryContext.newInvoiceDetails.supplier_name}\r\n                            id=\"supplier-name\"\r\n                            placeholder=\"Select a Supplier\"\r\n                            aria-label=\"Supplier\"\r\n                            aria-describedby=\"supplier-name\"\r\n                            >\r\n                            </FormControl>\r\n                            <InputGroup.Append>\r\n                                <InputGroup.Text \r\n                                    style={{\r\n                                        backgroundColor:inventoryContext.newInvoiceDetails.supplier_name?'yellowgreen':\"Red\", \r\n                                        fontWeight: 'bold',\r\n                                        color: 'white'}}\r\n                                >\r\n                                   {inventoryContext.newInvoiceDetails.supplier_name?'✓':'X'}\r\n                                </InputGroup.Text>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>   \r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Paid Amount</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            value={inventoryContext.newInvoiceDetails.paid_amount}\r\n                            placeholder=\"$0.00\"\r\n                            aria-label=\"Paid Amount\"\r\n                            aria-describedby=\"paid-amount\"\r\n                            type='number'\r\n                            id=\"paid-amount\"\r\n                            onChange={(e) => handleInputchange(e)}\r\n                            />\r\n                        </InputGroup> \r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mb-3\">\r\n                            <InputGroup.Prepend>\r\n                                <InputGroup.Text>Invoice Total</InputGroup.Text>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl\r\n                            disabled\r\n                            value={`$${inventoryContext.newInvoiceDetails.invoice_total.toFixed(2)}`}\r\n                            id=\"invoice-total\"\r\n                            placeholder=\"$0.00\"\r\n                            type='text'\r\n                            aria-label=\"Invoice Total\"\r\n                            aria-describedby=\"invoice-total\"\r\n                            onChange={(e) => handleInputchange(e)}\r\n                            />\r\n                        </InputGroup>   \r\n                    </Row>\r\n                    <Row className=\"mb-3\">\r\n                        {/* <Button id=\"add-invoice-item\" variant='warning' style={{width: '100%', fontWeight: 'bold'}} onClick={()=>checkInvDetails('add-new-item','xl')}>\r\n                            {addItemLoading? loadingSpinner: 'Add Invoice Item'}\r\n                        </Button> */}\r\n                        <SplitButton\r\n                            id=\"add-invoice-item\"\r\n                            style={{width: '100%', fontWeight: 'bold'}}\r\n                            variant=\"warning\"\r\n                            title={addItemLoading? loadingSpinner: 'Add Invoice Item'}\r\n                            onClick={()=>checkInvDetails('add-new-item','xl')}\r\n                        >\r\n                            <Dropdown.Item eventKey=\"1\" onClick={submitInvoice}>Submit Invoice</Dropdown.Item>\r\n                            <Dropdown.Item eventKey=\"2\">Clear Invoice</Dropdown.Item>\r\n                        </SplitButton>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <hr />\r\n            <Row>\r\n                <Col className='invoice-item-list'>\r\n                    <Row>\r\n                        <Col>\r\n                            <div className=\"invoice-item-titles-container\" style={{display: 'flex', padding: '0px'}}>\r\n                                <div className=\"invoice-item-container-titles\" style={{width: '30%'}}>Name English</div>\r\n                                <div className=\"invoice-item-container-titles\" style={{width: '30%'}}>Name Chinese</div>\r\n                                <div className=\"invoice-item-container-titles\" style={{width: '10%'}}>Quantity</div>\r\n                                <div className=\"invoice-item-container-titles\" style={{width: '10%'}}>Cost</div>\r\n                                <div className=\"invoice-item-container-titles\" style={{width: '10%'}}>Lot#</div>\r\n                                <div className=\"invoice-item-container-titles\" style={{width: '10%'}}></div>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                    {inventoryContext.newInvoiceItems?\r\n                        inventoryContext.newInvoiceItems.map((item, index) => {\r\n                            return(\r\n                                <Row key={index}>\r\n                                    <Col>\r\n                                        <div className=\"invoice-item-container\"style={{display: 'flex'}}>\r\n                                            <div style={{display:\"inline-block\", width: '30%', padding: '2px 2px 2px 5px'}}>{item.name_english}</div>\r\n                                            <div style={{display:\"inline-block\", width: '30%', padding: '2px 2px 2px 5px'}}>{item.name_chinese}</div>\r\n                                            <div style={{display:\"inline-block\", width: '10%', padding: '2px 2px 2px 5px', textAlign: \"center\"}}>{item.invoice_quantity}</div>\r\n                                            <div style={{display:\"inline-block\", width: '10%', padding: '2px 2px 2px 5px', textAlign: \"center\"}}>${(+item.cost).toFixed(2)}</div>\r\n                                            <div style={{display:\"inline-block\", width: '10%', padding: '2px 2px 2px 5px', textAlign: \"center\"}}>{item.lot}</div>\r\n                                            <div style={{display:\"inline-block\", padding: '2px 2px 2px 5px', margin: 'auto'}}><Badge variant='danger' as='button' size-='sm' onClick={() => removeItem(item, index)}>Remove</Badge></div>\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row>\r\n                            )\r\n                        })\r\n                    :\r\n                    <Row className='justify-content-md-center'>\r\n                        <Col style={{textAlign: 'center'}}>No Items</Col>\r\n                    </Row>\r\n                    }\r\n                </Col>\r\n                <Col className='invoice-item-list-mobile'>\r\n                    {inventoryContext.newInvoiceItems?\r\n                        <Accordion style={{width: '100%'}}>\r\n                            {inventoryContext.newInvoiceItems.map((item, index) => {\r\n                                return(\r\n                                    <Card key={`m-${index}`} className=\"item-card\">\r\n                                        <Accordion.Toggle \r\n                                        as={Card.Header} \r\n                                        eventKey={`${index}`} \r\n                                        >\r\n                                            <div className=\"card-header-title\" >\r\n                                                <div className=\"card-header-arrow\">▼</div><div style={{display:'inline'}}>{item.invoice_quantity} - {item.name_english}</div>\r\n                                            </div>\r\n                                        </Accordion.Toggle>\r\n                                        <Accordion.Collapse eventKey={`${index}`}>\r\n                                            <Card.Body>\r\n                                                <Row style={{marginBottom: '5px', borderBottom: '1px solid grey', paddingBottom: '5px'}}><Col xs={5}>Name English:</Col><Col>{item.name_english}</Col></Row>\r\n                                                <Row style={{marginBottom: '5px', borderBottom: '1px solid grey', paddingBottom: '5px'}}><Col xs={5}>Name Chinese:</Col><Col>{item.name_chinese}</Col></Row>\r\n                                                <Row style={{marginBottom: '5px', borderBottom: '1px solid grey',paddingBottom: '5px'}}><Col xs={5}>Quantity:</Col><Col>{item.invoice_quantity}</Col></Row>\r\n                                                <Row style={{marginBottom: '5px', borderBottom: '1px solid grey',paddingBottom: '5px'}}><Col xs={5}>Cost:</Col><Col>${(+item.cost).toFixed(2)}</Col></Row>\r\n                                                <Row style={{marginBottom: '5px', borderBottom: '1px solid grey',paddingBottom: '5px'}}><Col xs={5}>Lot#:</Col><Col>{item.lot}</Col></Row>\r\n                                                <Row><Col><Badge variant='danger' as='button' size-='sm' onClick={() => removeItem(item, index)}>Remove</Badge></Col></Row>\r\n                                            </Card.Body>\r\n                                        </Accordion.Collapse>\r\n                                    </Card>\r\n                                )\r\n                            })}\r\n                        </Accordion>\r\n                    :\r\n                    <Row className='justify-content-md-center'>\r\n                        <Col style={{textAlign: 'center'}}>No Items</Col>\r\n                    </Row>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n\r\n        {showModal?\r\n            <Modal\r\n            show={showModal}\r\n            onHide={() => setShowModal(false)}\r\n            backdrop=\"static\"\r\n            size={modalData.size}\r\n            keyboard={false}>\r\n                {modalSwitchFunction()}\r\n            </Modal>\r\n            :\r\n            null\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddInventoryInvoice;","C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\components\\addInventoryItem\\AddInventoryItem.js",[],"C:\\Users\\Mao\\Desktop\\cagoodandfresh\\client\\src\\serviceWorker.js",[],["195","196"],{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"197","replacedBy":"201"},{"ruleId":"199","replacedBy":"202"},{"ruleId":"197","replacedBy":"203"},{"ruleId":"199","replacedBy":"204"},{"ruleId":"197","replacedBy":"205"},{"ruleId":"199","replacedBy":"206"},{"ruleId":"197","replacedBy":"207"},{"ruleId":"199","replacedBy":"208"},{"ruleId":"197","replacedBy":"209"},{"ruleId":"199","replacedBy":"210"},{"ruleId":"197","replacedBy":"211"},{"ruleId":"199","replacedBy":"212"},{"ruleId":"213","severity":1,"message":"214","line":1,"column":16,"nodeType":"215","messageId":"216","endLine":1,"endColumn":24},{"ruleId":"213","severity":1,"message":"217","line":2,"column":9,"nodeType":"215","messageId":"216","endLine":2,"endColumn":15},{"ruleId":"213","severity":1,"message":"218","line":2,"column":33,"nodeType":"215","messageId":"216","endLine":2,"endColumn":36},{"ruleId":"197","replacedBy":"219"},{"ruleId":"199","replacedBy":"220"},{"ruleId":"197","replacedBy":"221"},{"ruleId":"199","replacedBy":"222"},{"ruleId":"213","severity":1,"message":"223","line":25,"column":25,"nodeType":"215","messageId":"216","endLine":25,"endColumn":39},{"ruleId":"213","severity":1,"message":"224","line":28,"column":12,"nodeType":"215","messageId":"216","endLine":28,"endColumn":20},{"ruleId":"197","replacedBy":"225"},{"ruleId":"199","replacedBy":"226"},{"ruleId":"197","replacedBy":"227"},{"ruleId":"199","replacedBy":"228"},{"ruleId":"213","severity":1,"message":"229","line":1,"column":36,"nodeType":"215","messageId":"216","endLine":1,"endColumn":45},{"ruleId":"197","replacedBy":"230"},{"ruleId":"199","replacedBy":"231"},{"ruleId":"197","replacedBy":"232"},{"ruleId":"199","replacedBy":"233"},{"ruleId":"213","severity":1,"message":"234","line":4,"column":8,"nodeType":"215","messageId":"216","endLine":4,"endColumn":11},{"ruleId":"213","severity":1,"message":"235","line":14,"column":12,"nodeType":"215","messageId":"216","endLine":14,"endColumn":25},{"ruleId":"236","severity":1,"message":"237","line":173,"column":8,"nodeType":"238","endLine":173,"endColumn":42,"suggestions":"239"},{"ruleId":"197","replacedBy":"240"},{"ruleId":"199","replacedBy":"241"},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],["242"],["243"],["242"],["243"],["242"],["243"],["242"],["243"],["242"],["243"],["242"],["243"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Col' is defined but never used.",["242"],["243"],["242"],["243"],"'setContentData' is assigned a value but never used.","'updating' is assigned a value but never used.",["242"],["243"],["242"],["243"],"'useEffect' is defined but never used.",["242"],["243"],["242"],["243"],"'API' is defined but never used.","'submittingInv' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateInvoiceTotal'. Either include it or remove the dependency array.","ArrayExpression",["244"],["242"],["243"],"no-global-assign","no-unsafe-negation",{"desc":"245","fix":"246"},"Update the dependencies array to be: [inventoryContext.newInvoiceItems, updateInvoiceTotal]",{"range":"247","text":"248"},[7338,7372],"[inventoryContext.newInvoiceItems, updateInvoiceTotal]"]